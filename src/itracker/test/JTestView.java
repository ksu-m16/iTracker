/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package itracker.test;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import itracker.service.ServiceController;
import itracker.util.Location;
import itracker.util.Log;
import itracker.util.Time;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.CharBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author KerneL
 */
public class JTestView extends javax.swing.JFrame {

    /**
     * Creates new form JTestView
     */
    public JTestView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgLoc = new javax.swing.ButtonGroup();
        bgFreq = new javax.swing.ButtonGroup();
        bgSpd = new javax.swing.ButtonGroup();
        bgAcc = new javax.swing.ButtonGroup();
        bgBut = new javax.swing.ButtonGroup();
        bgPwr = new javax.swing.ButtonGroup();
        bgCar = new javax.swing.ButtonGroup();
        bgBat = new javax.swing.ButtonGroup();
        bgNet = new javax.swing.ButtonGroup();
        bgFile = new javax.swing.ButtonGroup();
        bgTime = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jlLoc = new javax.swing.JLabel();
        jrbLocOn = new javax.swing.JRadioButton();
        jrbLocOff = new javax.swing.JRadioButton();
        jlFreq = new javax.swing.JLabel();
        jrbFreqNormal = new javax.swing.JRadioButton();
        jrbFreqLow = new javax.swing.JRadioButton();
        jlSpd = new javax.swing.JLabel();
        jrbSpdNormal = new javax.swing.JRadioButton();
        jrbSpdLow = new javax.swing.JRadioButton();
        jlAcc = new javax.swing.JLabel();
        jrbAccHigh = new javax.swing.JRadioButton();
        jrbAccLow = new javax.swing.JRadioButton();
        jlBut = new javax.swing.JLabel();
        jrbButOn = new javax.swing.JRadioButton();
        jrbButOff = new javax.swing.JRadioButton();
        jlPwr = new javax.swing.JLabel();
        jrbPwrOn = new javax.swing.JRadioButton();
        jrbPwrOff = new javax.swing.JRadioButton();
        jlCar = new javax.swing.JLabel();
        jrbCarOn = new javax.swing.JRadioButton();
        jrbCarOff = new javax.swing.JRadioButton();
        jlBat = new javax.swing.JLabel();
        jrbBatNormal = new javax.swing.JRadioButton();
        jrbBatLow = new javax.swing.JRadioButton();
        jlNet = new javax.swing.JLabel();
        jrbNetOn = new javax.swing.JRadioButton();
        jrbNetOff = new javax.swing.JRadioButton();
        jlFile = new javax.swing.JLabel();
        jrbFileOn = new javax.swing.JRadioButton();
        jrbFileOff = new javax.swing.JRadioButton();
        jlTime = new javax.swing.JLabel();
        jrbTime0 = new javax.swing.JRadioButton();
        jrbTime5 = new javax.swing.JRadioButton();
        jrbTime10 = new javax.swing.JRadioButton();
        jrbTime1 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaStatus = new javax.swing.JTextArea();
        jspNetwork = new javax.swing.JScrollPane();
        jtfNetwork = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jlLoc.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlLoc, gridBagConstraints);

        bgLoc.add(jrbLocOn);
        jrbLocOn.setSelected(true);
        jrbLocOn.setText("Enabled");
        jrbLocOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbLocOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbLocOn, gridBagConstraints);

        bgLoc.add(jrbLocOff);
        jrbLocOff.setText("Disabled");
        jrbLocOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbLocOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbLocOff, gridBagConstraints);

        jlFreq.setText("Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlFreq, gridBagConstraints);

        bgFreq.add(jrbFreqNormal);
        jrbFreqNormal.setSelected(true);
        jrbFreqNormal.setText("Normal (1Hz)");
        jrbFreqNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbFreqNormalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbFreqNormal, gridBagConstraints);

        bgFreq.add(jrbFreqLow);
        jrbFreqLow.setText("Low(0.5Hz)");
        jrbFreqLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbFreqLowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbFreqLow, gridBagConstraints);

        jlSpd.setText("Speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlSpd, gridBagConstraints);

        bgSpd.add(jrbSpdNormal);
        jrbSpdNormal.setSelected(true);
        jrbSpdNormal.setText("Normal (5 m/s)");
        jrbSpdNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSpdNormalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbSpdNormal, gridBagConstraints);

        bgSpd.add(jrbSpdLow);
        jrbSpdLow.setText("None (0 m/s)");
        jrbSpdLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSpdLowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbSpdLow, gridBagConstraints);

        jlAcc.setText("Accuracy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlAcc, gridBagConstraints);

        bgAcc.add(jrbAccHigh);
        jrbAccHigh.setSelected(true);
        jrbAccHigh.setText("High (10)");
        jrbAccHigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbAccHighActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbAccHigh, gridBagConstraints);

        bgAcc.add(jrbAccLow);
        jrbAccLow.setText("Low (50)");
        jrbAccLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbAccLowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbAccLow, gridBagConstraints);

        jlBut.setText("Button");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlBut, gridBagConstraints);

        bgBut.add(jrbButOn);
        jrbButOn.setText("On");
        jrbButOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbButOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbButOn, gridBagConstraints);

        bgBut.add(jrbButOff);
        jrbButOff.setSelected(true);
        jrbButOff.setText("Off");
        jrbButOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbButOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbButOff, gridBagConstraints);

        jlPwr.setText("Power");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlPwr, gridBagConstraints);

        bgPwr.add(jrbPwrOn);
        jrbPwrOn.setText("On");
        jrbPwrOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbPwrOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbPwrOn, gridBagConstraints);

        bgPwr.add(jrbPwrOff);
        jrbPwrOff.setSelected(true);
        jrbPwrOff.setText("Off");
        jrbPwrOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbPwrOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbPwrOff, gridBagConstraints);

        jlCar.setText("Carkit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlCar, gridBagConstraints);

        bgCar.add(jrbCarOn);
        jrbCarOn.setText("On");
        jrbCarOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCarOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbCarOn, gridBagConstraints);

        bgCar.add(jrbCarOff);
        jrbCarOff.setSelected(true);
        jrbCarOff.setText("Off");
        jrbCarOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCarOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbCarOff, gridBagConstraints);

        jlBat.setText("Battery");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlBat, gridBagConstraints);

        bgBat.add(jrbBatNormal);
        jrbBatNormal.setSelected(true);
        jrbBatNormal.setText("Normal (50%)");
        jrbBatNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbBatNormalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbBatNormal, gridBagConstraints);

        bgBat.add(jrbBatLow);
        jrbBatLow.setText("Empty (10%)");
        jrbBatLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbBatLowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbBatLow, gridBagConstraints);

        jlNet.setText("Network");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlNet, gridBagConstraints);

        bgNet.add(jrbNetOn);
        jrbNetOn.setText("Enabled");
        jrbNetOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNetOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbNetOn, gridBagConstraints);

        bgNet.add(jrbNetOff);
        jrbNetOff.setSelected(true);
        jrbNetOff.setText("Disabled");
        jrbNetOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNetOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbNetOff, gridBagConstraints);

        jlFile.setText("Filesystem");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlFile, gridBagConstraints);

        bgFile.add(jrbFileOn);
        jrbFileOn.setText("Enabled");
        jrbFileOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbFileOnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbFileOn, gridBagConstraints);

        bgFile.add(jrbFileOff);
        jrbFileOff.setSelected(true);
        jrbFileOff.setText("Disabled");
        jrbFileOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbFileOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbFileOff, gridBagConstraints);

        jlTime.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jlTime, gridBagConstraints);

        bgTime.add(jrbTime0);
        jrbTime0.setText("pause");
        jrbTime0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTime0ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbTime0, gridBagConstraints);

        bgTime.add(jrbTime5);
        jrbTime5.setText("x100");
        jrbTime5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTime5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbTime5, gridBagConstraints);

        bgTime.add(jrbTime10);
        jrbTime10.setText("x10");
        jrbTime10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTime10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbTime10, gridBagConstraints);

        bgTime.add(jrbTime1);
        jrbTime1.setSelected(true);
        jrbTime1.setText("x1");
        jrbTime1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTime1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jPanel1.add(jrbTime1, gridBagConstraints);

        jtaStatus.setColumns(20);
        jtaStatus.setRows(5);
        jScrollPane1.setViewportView(jtaStatus);

        jtfNetwork.setColumns(20);
        jtfNetwork.setRows(5);
        jspNetwork.setViewportView(jtfNetwork);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrbCarOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCarOnActionPerformed
        service.getDataObserver().onKit(true);
    }//GEN-LAST:event_jrbCarOnActionPerformed

    private void jrbTime1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTime1ActionPerformed
        timeFactor = 100;
    }//GEN-LAST:event_jrbTime1ActionPerformed

    private void jrbTime5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTime5ActionPerformed
        timeFactor = 1;
    }//GEN-LAST:event_jrbTime5ActionPerformed

    private void jrbTime10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTime10ActionPerformed
        timeFactor = 10;
    }//GEN-LAST:event_jrbTime10ActionPerformed

    private void jrbTime0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTime0ActionPerformed
        timeFactor = 0;
    }//GEN-LAST:event_jrbTime0ActionPerformed

    private void jrbAccHighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbAccHighActionPerformed
        accuracy = 10;
    }//GEN-LAST:event_jrbAccHighActionPerformed

    private void jrbAccLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbAccLowActionPerformed
        accuracy = 50;
    }//GEN-LAST:event_jrbAccLowActionPerformed

    private void jrbSpdNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSpdNormalActionPerformed
        speed = 5;
    }//GEN-LAST:event_jrbSpdNormalActionPerformed

    private void jrbSpdLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSpdLowActionPerformed
        speed = 0;
    }//GEN-LAST:event_jrbSpdLowActionPerformed

    private void jrbButOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbButOnActionPerformed
        service.getDataObserver().onAction(true);
    }//GEN-LAST:event_jrbButOnActionPerformed

    private void jrbButOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbButOffActionPerformed
        service.getDataObserver().onAction(false);
    }//GEN-LAST:event_jrbButOffActionPerformed

    private void jrbPwrOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbPwrOnActionPerformed
        service.getDataObserver().onPower(true);
    }//GEN-LAST:event_jrbPwrOnActionPerformed

    private void jrbPwrOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbPwrOffActionPerformed
        service.getDataObserver().onPower(false);
    }//GEN-LAST:event_jrbPwrOffActionPerformed

    private void jrbCarOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCarOffActionPerformed
        service.getDataObserver().onKit(false);
    }//GEN-LAST:event_jrbCarOffActionPerformed

    private void jrbBatNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbBatNormalActionPerformed
        battery = 50;
    }//GEN-LAST:event_jrbBatNormalActionPerformed

    private void jrbBatLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbBatLowActionPerformed
        battery = 10;
    }//GEN-LAST:event_jrbBatLowActionPerformed

    private void jrbLocOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbLocOnActionPerformed
        locationOn = true;
    }//GEN-LAST:event_jrbLocOnActionPerformed

    private void jrbLocOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbLocOffActionPerformed
        locationOn = false;
    }//GEN-LAST:event_jrbLocOffActionPerformed

    private void jrbFreqNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbFreqNormalActionPerformed
        skip = 1;
    }//GEN-LAST:event_jrbFreqNormalActionPerformed

    private void jrbFreqLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbFreqLowActionPerformed
        skip = 2;
    }//GEN-LAST:event_jrbFreqLowActionPerformed

    private void jrbFileOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbFileOnActionPerformed
        ServiceController.Options opt = service.getOptions();
        opt.io.cache.dataFolder = ".";
        service.setOptions(opt);        
    }//GEN-LAST:event_jrbFileOnActionPerformed

    private void jrbFileOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbFileOffActionPerformed
        ServiceController.Options opt = service.getOptions();
        opt.io.cache.dataFolder = ":";
        service.setOptions(opt);               
    }//GEN-LAST:event_jrbFileOffActionPerformed

    private void jrbNetOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNetOnActionPerformed
        ServiceController.Options opt = service.getOptions();
        opt.io.network.host = "127.0.0.1";
        opt.io.network.port = 5000;        
        service.setOptions(opt);               
    }//GEN-LAST:event_jrbNetOnActionPerformed

    private void jrbNetOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNetOffActionPerformed
        ServiceController.Options opt = service.getOptions();
        opt.io.network.host = ":";
        opt.io.network.port = 5000;        
        service.setOptions(opt);                      
    }//GEN-LAST:event_jrbNetOffActionPerformed
        
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    ServiceController service = new ServiceController();    
    {
        service.startup();        
    }
    
    
    Socket sock;
    {        
        new Thread() {

            @Override
            public void run() {
                try {
                    ServerSocket srvSock = new ServerSocket(5000);
                    while (true) {
                        sock = srvSock.accept();
                        Log.d(this, "Accepted connection!");
                    }                    
                } catch (IOException ex) {
                    Logger.getLogger(JTestView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }                
        }.start();            
    }
    
    StringBuffer netData = new StringBuffer();
    void updateNetwork() {
        try {
            if (sock == null) {
                return;
            }
            InputStream is = sock.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);            
            
            int count = 0;
            while (isr.ready()) {
                netData.append((char)isr.read());
                count++;
            }                       
            
            String netStr = netData.toString();
            if (netStr.length() > 1024*16) {
                netStr = netStr.substring(netStr.length() - 1024*16, netStr.length());
            }
            netStr = netStr.replaceAll(">", ">\n");
            jtfNetwork.setText(netStr);
            jtfNetwork.setCaretPosition(netStr.length());
        } catch (IOException ex) {                        
            sock = null;
        }        
    }
    
    static {
        Time.setTimeProvider(Time.DebugTime.getInstance());        
    }
    Time.DebugTime time = Time.DebugTime.getInstance();
    int timeFactor = 100;
    double speed = 5;
    double accuracy = 10;
    double battery = 50;
    boolean locationOn = true;
    int skip = 1;
    
    long oldTime = 0;
    long lastStatusUpdateTime = 0;
    
    Thread generator = new Thread() {
        
        public void pause(long time) {
            long start = System.currentTimeMillis();
            while (System.currentTimeMillis() - start < time);
        }
        
        
        @Override
        public void run() {
            int nSkip = skip;
            while(true) {
                long tf = timeFactor;                                
                if (tf == 0) {
                    pause(10);
                    continue;
                }                
                for (int i = 0; i < tf; ++i) {
                    pause(10);
                    time.time += 1000 / tf;
                }
                
                if (System.currentTimeMillis() - lastStatusUpdateTime > 200) {
                    String status = gson.toJson(service.getStatus());
                    jtaStatus.setText(status);
                    updateNetwork();
                }
                
                if (time.time - oldTime >= 1000) {
                    oldTime = time.time;
                    service.getDataObserver().onBattery(battery);                    
                    
                    nSkip--;
                    if (locationOn && (nSkip <= 0)) {
                        nSkip = skip;
                        Location l = Location.fromParams(time.current(), 
                            0, 0, 0, speed, 0, accuracy);                    
                        service.getDataObserver().onLocation(l);
                    }                    
                }
            }
        }        
    };
            {
                generator.start();
            }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTestView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTestView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTestView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTestView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JTestView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgAcc;
    private javax.swing.ButtonGroup bgBat;
    private javax.swing.ButtonGroup bgBut;
    private javax.swing.ButtonGroup bgCar;
    private javax.swing.ButtonGroup bgFile;
    private javax.swing.ButtonGroup bgFreq;
    private javax.swing.ButtonGroup bgLoc;
    private javax.swing.ButtonGroup bgNet;
    private javax.swing.ButtonGroup bgPwr;
    private javax.swing.ButtonGroup bgSpd;
    private javax.swing.ButtonGroup bgTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlAcc;
    private javax.swing.JLabel jlBat;
    private javax.swing.JLabel jlBut;
    private javax.swing.JLabel jlCar;
    private javax.swing.JLabel jlFile;
    private javax.swing.JLabel jlFreq;
    private javax.swing.JLabel jlLoc;
    private javax.swing.JLabel jlNet;
    private javax.swing.JLabel jlPwr;
    private javax.swing.JLabel jlSpd;
    private javax.swing.JLabel jlTime;
    private javax.swing.JRadioButton jrbAccHigh;
    private javax.swing.JRadioButton jrbAccLow;
    private javax.swing.JRadioButton jrbBatLow;
    private javax.swing.JRadioButton jrbBatNormal;
    private javax.swing.JRadioButton jrbButOff;
    private javax.swing.JRadioButton jrbButOn;
    private javax.swing.JRadioButton jrbCarOff;
    private javax.swing.JRadioButton jrbCarOn;
    private javax.swing.JRadioButton jrbFileOff;
    private javax.swing.JRadioButton jrbFileOn;
    private javax.swing.JRadioButton jrbFreqLow;
    private javax.swing.JRadioButton jrbFreqNormal;
    private javax.swing.JRadioButton jrbLocOff;
    private javax.swing.JRadioButton jrbLocOn;
    private javax.swing.JRadioButton jrbNetOff;
    private javax.swing.JRadioButton jrbNetOn;
    private javax.swing.JRadioButton jrbPwrOff;
    private javax.swing.JRadioButton jrbPwrOn;
    private javax.swing.JRadioButton jrbSpdLow;
    private javax.swing.JRadioButton jrbSpdNormal;
    private javax.swing.JRadioButton jrbTime0;
    private javax.swing.JRadioButton jrbTime1;
    private javax.swing.JRadioButton jrbTime10;
    private javax.swing.JRadioButton jrbTime5;
    private javax.swing.JScrollPane jspNetwork;
    private javax.swing.JTextArea jtaStatus;
    private javax.swing.JTextArea jtfNetwork;
    // End of variables declaration//GEN-END:variables
}
